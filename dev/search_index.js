var documenterSearchIndex = {"docs":
[{"location":"context/","page":"context","title":"context","text":"ECCO stands for Estimating the Circulation and Climate of the Ocean. \nECCO is a 40+ years running effort initiated by Pr. Carl Wunsch at MIT, and which now involves distributed academic projects accross the US (MIT, NASA JPL, UCSD, UTA, WHOI), Europe (AWI, UH), and the UK (BAS).","category":"page"},{"location":"examples/#Simple-air-sea-flux-calculation","page":"Examples","title":"Simple air-sea flux calculation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Simple air sea flux calculation and it's adjoint, obtained via Enzyme.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ECCO\n(f,f_ad,x)=toy_problems.Enzyme_ex1()\nf_x=f(x); f_ad_x=f_ad(x)[1][1]\nprintln(\"f(x)=$f_x adfx=$f_ad_x\")","category":"page"},{"location":"examples/#Bulk-formulae","page":"Examples","title":"Bulk formulae","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Air sea flux calculation derived using standard bulk formulae algorithm, and it's adjoint, obtained via Enzyme.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(f,f_ad,x)=toy_problems.Enzyme_ex2()\nf_x=f(x...); f_ad_x=f_ad(x...)\nprintln(\"f(x)=$(f_x) adfx=$(f_ad_x)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(f,f_ad,x,y)=toy_problems.Enzyme_ex3()\nf_x=f(x,y); f_ad_x=f_ad(x,y)\nprintln(\"f(x)=$(f_x) adfx=$(f_ad_x)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(f,f_ad,x,y)=toy_problems.Enzyme_ex4()\nf_x=f(x,y); f_ad_x=f_ad(x,y)\nprintln(\"f(x)=$(f_x) adfx=$(f_ad_x)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(x,adx)=toy_problems.ForwardDiff_ex1()\nprintln(\"x=$(x) adfx=$(adx)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(x,adx)=Zygote_examples.Zygote_ex1()","category":"page"},{"location":"examples/#Optimization","page":"Examples","title":"Optimization","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ECCO\n(f,x0,x1,result)=toy_problems.optim_ex1()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"h,h!,x0,x1,result=toy_problems.optim_ex2()","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"h,h!,x0,x1,result=toy_problems.optim_ex3()","category":"page"},{"location":"examples/#Lorenz","page":"Examples","title":"Lorenz","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"See https://en.wikipedia.org/wiki/Lorenz96model","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ECCO, CairoMakie\nxyz=Lorenz_models.L96()\nlines(xyz[1,:],xyz[2,:],xyz[end,:])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"x,y,z=Lorenz_models.L63()\nlines(x,y,z)","category":"page"},{"location":"examples/#Budyko-Sellers-Energy-Balance-Model","page":"Examples","title":"Budyko-Sellers Energy Balance Model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"See this tutorial for detailed explanations.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ECCO, CairoMakie\n\n(; Q, y) = Budyko_Sellers_models.params\nTsol,Tini,dTdt_ini,incr_t,incr=Budyko_Sellers_models.dTdt_demo(Q)\n\nfig=Figure()\nAxis(fig[1,1]); lines!(y,dTdt_ini)\nAxis(fig[2,1]); lines!(y,Tini); lines!(y,Tsol,color=:red)\nAxis(fig[3,1]); lines!(incr_t,incr)\t\nfig","category":"page"},{"location":"examples/#Parameter-Choices","page":"Examples","title":"Parameter Choices","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"From B. Rose notebook :","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"R = 10^7 J/m2/K","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"From Walsh and Rackauckas :","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Figure 3. Equilibrium solutions (7) with albedo function (9) for five η-values. Note T∗ ηi (ηi) = Tc only for i = 2,5. \nParameters: Q = 343, A = 202, B = 1.9, C = 3.04, αw = 0.32, αs = 0.62, Tc =−10.\nFigure 9. Equilibrium solutions of (2) with albedo function (34). Solid: η= 0.1. Dashed: η= 0.25. Dash-Dot: η= 0.4. \nParameters: Q = 321,A = 167,B = 1.5,C = 2.25,M = 50,αw = 0.32,αi = 0.46,αs = 0.72,ρ= 0.35.","category":"page"},{"location":"examples/#Earlier-Implementations","page":"Examples","title":"Earlier Implementations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"https://brian-rose.github.io/ClimateLaboratoryBook/courseware/one-dim-ebm.html\nhttps://github.com/ECCO-Summer-School/ESS25-Team_FLOW\nhttps://www.cise.ufl.edu/~luke.morris/2_4_2025/build/bsh/budyko_sellers_halfar/","category":"page"},{"location":"examples/#Related-References","page":"Examples","title":"Related References","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"discrete and continuous – on the Budyko-Bellers energy balance climate model with ice line coupling – James Walsh, Christopher Rackauckas – doi:10.3934/dcdsb.2015.20.2187\nTheory of Energy-Balance Climate Models – Gerald R. North – 1975 – DOI: <https://doi.org/10.1175/1520-0469(1975)032<2033:TOEBCM>2.0.CO;2>\nPredictability in a Solvable Stochastic Climate Model – Gerald R. North and Robert F. Cahalan – DOI: https://doi.org/10.1175/1520-0469(1981)038%3C0504:PIASSC%3E2.0.CO;2","category":"page"},{"location":"examples/#Glacier","page":"Examples","title":"Glacier","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Simple, 1D mountain glacier model inspired from the book Fundamentals of Glacier Dynamics,  by CJ van der Veen, and which was translated to Julia by S Gaikwad.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"See https://sicopolis.readthedocs.io/en/latest/AD/tutorial_tapenade.html#mountain-glacier-model","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ECCO\nV=glacier_model.forward_problem(0.002)","category":"page"},{"location":"#ECCO","page":"Home","title":"ECCO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ECCO.jl, which provides examples of differentiation, and optimization in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"this package is in early development stage","category":"page"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/#ECCO.toy_problems.Enzyme_ex1-Tuple{}","page":"API","title":"ECCO.toy_problems.Enzyme_ex1","text":"toy_problems.Enzyme_ex1()\n\nSimple air sea flux calculation and it's adjoint, obtained via Enzyme.\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.Enzyme_ex2-Tuple{}","page":"API","title":"ECCO.toy_problems.Enzyme_ex2","text":"toy_problems.Enzyme_ex2()\n\nair sea flux calculation derived using standard bulk formulae algorithm.\nit's adjoint, obtained via Enzyme.\n\nusing ECCO\n(f,f_ad,x)=toy_problems.Enzyme_ex2()\nf(x...)\nf_ad(x...)\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.Enzyme_ex3-Tuple{}","page":"API","title":"ECCO.toy_problems.Enzyme_ex3","text":"toy_problems.Enzyme_ex3()\n\nusing ECCO\n(f,f_ad,x,y)=toy_problems.Enzyme_ex3()\nf(x,y)\nf_ad(x,y)\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.Enzyme_ex4-Tuple{}","page":"API","title":"ECCO.toy_problems.Enzyme_ex4","text":"toy_problems.Enzyme_ex4()\n\nusing ECCO\n(f,f_ad,x,y)=toy_problems.Enzyme_ex4()\nf(x,y)\nf_ad(x,y)\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.ForwardDiff_ex1-Tuple{}","page":"API","title":"ECCO.toy_problems.ForwardDiff_ex1","text":"toy_problems.ForwardDiff_ex1()\n\nusing ECCO\n(x,adx)=toy_problems.ForwardDiff_ex1()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.optim_ex1-Tuple{}","page":"API","title":"ECCO.toy_problems.optim_ex1","text":"toy_problems.optim_ex1()\n\nusing ECCO\n(f,x0,x1,result)=toy_problems.optim_ex1()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.optim_ex2-Tuple{}","page":"API","title":"ECCO.toy_problems.optim_ex2","text":"toy_problems.optim_ex2()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.toy_problems.optim_ex3-Tuple{}","page":"API","title":"ECCO.toy_problems.optim_ex3","text":"toy_problems.optim_ex3()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Zygote_examples.Zygote_ex1-Tuple{}","page":"API","title":"ECCO.Zygote_examples.Zygote_ex1","text":"toy_problems.Zygote_ex1()\n\nusing ECCO\n(x,adx)=Zygote_examples.Zygote_ex1()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.glacier_model.forward_problem","page":"API","title":"ECCO.glacier_model.forward_problem","text":"forward_problem(M0=0.004; dt=1/12.0, nt=6*5000, dx = 1.0, nx = 30)\n\nSimple, 1D mountain glacier model inspired from the book Fundamentals of Glacier Dynamics,  by CJ van der Veen, and which was translated to Julia by S Gaikwad.\n\nSee https://sicopolis.readthedocs.io/en/latest/AD/tutorial_tapenade.html#mountain-glacier-model\n\nV=glacier_model.forward_problem(0.002)\n\n\n\n\n\n","category":"function"},{"location":"API/#ECCO.Lorenz_models.L63-Tuple{}","page":"API","title":"ECCO.Lorenz_models.L63","text":"L63(; nt=10000)\n\nSee https://en.wikipedia.org/wiki/Lorenz_system\n\nusing ECCO, CairoMakie\nx,y,z=Lorenz_models.L63()\nlines(x,y,z)\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Lorenz_models.L96-Tuple{}","page":"API","title":"ECCO.Lorenz_models.L96","text":"L96(; N=5, F=8)\n\nSee https://en.wikipedia.org/wiki/Lorenz96model\n\nusing ECCO, CairoMakie\nxyz=Lorenz_models.L96()\nlines(xyz[1,:],xyz[2,:],xyz[end,:])\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Budyko_Sellers_models.params","page":"API","title":"ECCO.Budyko_Sellers_models.params","text":"Budyko-Sellers Energy Balance Model\n\nParameter Choices\n\nFrom B. Rose notebook :\n\nR = 10^7 J/m2/K\n\nFrom Walsh and Rackauckas :\n\nFigure 3. Equilibrium solutions (7) with albedo function (9) for five η-values. Note T∗ ηi (ηi) = Tc only for i = 2,5. \nParameters: Q = 343, A = 202, B = 1.9, C = 3.04, αw = 0.32, αs = 0.62, Tc =−10.\nFigure 9. Equilibrium solutions of (2) with albedo function (34). Solid: η= 0.1. Dashed: η= 0.25. Dash-Dot: η= 0.4. \nParameters: Q = 321,A = 167,B = 1.5,C = 2.25,M = 50,αw = 0.32,αi = 0.46,αs = 0.72,ρ= 0.35.\n\n\n\n\n\n","category":"constant"},{"location":"API/#ECCO.Budyko_Sellers_models.adjoint_demo","page":"API","title":"ECCO.Budyko_Sellers_models.adjoint_demo","text":"adjoint_demo(par=[Q])\n\ngenerate obs for cost function with fake_obs.\ncall the_main_loop_cost and adthe_main_loop_cost\nreturn gradient check result\n\ngrdchk=adjoint_demo([Q])\n\n\n\n\n\n","category":"function"},{"location":"API/#ECCO.Budyko_Sellers_models.dTdt_demo","page":"API","title":"ECCO.Budyko_Sellers_models.dTdt_demo","text":"dTdt_demo(par=[Q])\n\nusing ECCO, CairoMakie\n\n(; Q, y) = Budyko_Sellers_models.params\nTsol,Tini,dTdt_ini,incr_t,incr=Budyko_Sellers_models.dTdt_demo(Q)\n\nfig=Figure()\nAxis(fig[1,1]); lines!(y,dTdt_ini)\nAxis(fig[2,1]); lines!(y,Tini); lines!(y,Tsol,color=:red)\nAxis(fig[3,1]); lines!(incr_t,incr)\t\nfig\n\n\n\n\n\n","category":"function"},{"location":"API/#ECCO.Budyko_Sellers_models.dTdt_loop_optim-Tuple{}","page":"API","title":"ECCO.Budyko_Sellers_models.dTdt_loop_optim","text":"dTdt_loop_optim()\n\nCall the_main_loop and then Optim.optimize.\n\nf,x0,x1,result=dTdt_loop_optim()\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Budyko_Sellers_models.dTdt_solve_optim-Tuple{Any}","page":"API","title":"ECCO.Budyko_Sellers_models.dTdt_solve_optim","text":"dTdt_solve_optim(Tobs)\n\nCall dTdt_solve and then Optim.optimize (adjoint free).\n\nf,x0,x1,result=dTdt_solve_optim(Tobs)\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Budyko_Sellers_models.optim_demo","page":"API","title":"ECCO.Budyko_Sellers_models.optim_demo","text":"optim_demo(Q=Q; verbose=false)\n\nCall dTdt_solve and then dTdt_solve_optim.\n\noptim_demo()\n\n\n\n\n\n","category":"function"},{"location":"API/#ECCO.Budyko_Sellers_models.optim_demo_loop-Tuple{}","page":"API","title":"ECCO.Budyko_Sellers_models.optim_demo_loop","text":"optim_demo_loop()\n\nCall dTdt_loop_optim.\n\n\n\n\n\n","category":"method"},{"location":"API/#ECCO.Budyko_Sellers_models.the_main_loop-Tuple{Any}","page":"API","title":"ECCO.Budyko_Sellers_models.the_main_loop","text":"the_main_loop(x; nt=10000)\n\nDo nt time steps of dt*dTdt(result,Q=x).\n\n\n\n\n\n","category":"method"}]
}
